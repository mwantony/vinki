{"ast":null,"code":"import HTMLMaskElement from './html-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './mask-element.js';\nclass HTMLContenteditableMaskElement extends HTMLMaskElement {\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n  get _unsafeSelectionStart() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n  get _unsafeSelectionEnd() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n  _unsafeSelect(start, end) {\n    if (!this.rootElement.createRange) return;\n    const range = this.rootElement.createRange();\n    range.setStart(this.input.firstChild || this.input, start);\n    range.setEnd(this.input.lastChild || this.input, end);\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  /**\n    HTMLElement value\n    @override\n  */\n  get value() {\n    // $FlowFixMe\n    return this.input.textContent;\n  }\n  set value(value) {\n    this.input.textContent = value;\n  }\n}\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\nexport { HTMLContenteditableMaskElement as default };","map":{"version":3,"names":["HTMLMaskElement","IMask","HTMLContenteditableMaskElement","_unsafeSelectionStart","root","rootElement","selection","getSelection","anchorOffset","focusOffset","_unsafeSelectionEnd","_unsafeSelect","start","end","createRange","range","setStart","input","firstChild","setEnd","lastChild","removeAllRanges","addRange","value","textContent","default"],"sources":["C:/Users/Antony/Documents/GitHub/vinki/client/node_modules/imask/esm/controls/html-contenteditable-mask-element.js"],"sourcesContent":["import HTMLMaskElement from './html-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './mask-element.js';\n\nclass HTMLContenteditableMaskElement extends HTMLMaskElement {\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n  get _unsafeSelectionStart() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n  get _unsafeSelectionEnd() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n  _unsafeSelect(start, end) {\n    if (!this.rootElement.createRange) return;\n    const range = this.rootElement.createRange();\n    range.setStart(this.input.firstChild || this.input, start);\n    range.setEnd(this.input.lastChild || this.input, end);\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  /**\n    HTMLElement value\n    @override\n  */\n  get value() {\n    // $FlowFixMe\n    return this.input.textContent;\n  }\n  set value(value) {\n    this.input.textContent = value;\n  }\n}\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n\nexport { HTMLContenteditableMaskElement as default };\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,wBAAwB;AACpD,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAO,mBAAmB;AAE1B,MAAMC,8BAA8B,SAASF,eAAe,CAAC;EAC3D;AACF;AACA;AACA;EACE,IAAIG,qBAAqBA,CAAA,EAAG;IAC1B,MAAMC,IAAI,GAAG,IAAI,CAACC,WAAW;IAC7B,MAAMC,SAAS,GAAGF,IAAI,CAACG,YAAY,IAAIH,IAAI,CAACG,YAAY,CAAC,CAAC;IAC1D,MAAMC,YAAY,GAAGF,SAAS,IAAIA,SAAS,CAACE,YAAY;IACxD,MAAMC,WAAW,GAAGH,SAAS,IAAIA,SAAS,CAACG,WAAW;IACtD,IAAIA,WAAW,IAAI,IAAI,IAAID,YAAY,IAAI,IAAI,IAAIA,YAAY,GAAGC,WAAW,EAAE;MAC7E,OAAOD,YAAY;IACrB;IACA,OAAOC,WAAW;EACpB;;EAEA;AACF;AACA;AACA;EACE,IAAIC,mBAAmBA,CAAA,EAAG;IACxB,MAAMN,IAAI,GAAG,IAAI,CAACC,WAAW;IAC7B,MAAMC,SAAS,GAAGF,IAAI,CAACG,YAAY,IAAIH,IAAI,CAACG,YAAY,CAAC,CAAC;IAC1D,MAAMC,YAAY,GAAGF,SAAS,IAAIA,SAAS,CAACE,YAAY;IACxD,MAAMC,WAAW,GAAGH,SAAS,IAAIA,SAAS,CAACG,WAAW;IACtD,IAAIA,WAAW,IAAI,IAAI,IAAID,YAAY,IAAI,IAAI,IAAIA,YAAY,GAAGC,WAAW,EAAE;MAC7E,OAAOD,YAAY;IACrB;IACA,OAAOC,WAAW;EACpB;;EAEA;AACF;AACA;AACA;EACEE,aAAaA,CAACC,KAAK,EAAEC,GAAG,EAAE;IACxB,IAAI,CAAC,IAAI,CAACR,WAAW,CAACS,WAAW,EAAE;IACnC,MAAMC,KAAK,GAAG,IAAI,CAACV,WAAW,CAACS,WAAW,CAAC,CAAC;IAC5CC,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,IAAI,IAAI,CAACD,KAAK,EAAEL,KAAK,CAAC;IAC1DG,KAAK,CAACI,MAAM,CAAC,IAAI,CAACF,KAAK,CAACG,SAAS,IAAI,IAAI,CAACH,KAAK,EAAEJ,GAAG,CAAC;IACrD,MAAMT,IAAI,GAAG,IAAI,CAACC,WAAW;IAC7B,MAAMC,SAAS,GAAGF,IAAI,CAACG,YAAY,IAAIH,IAAI,CAACG,YAAY,CAAC,CAAC;IAC1D,IAAID,SAAS,EAAE;MACbA,SAAS,CAACe,eAAe,CAAC,CAAC;MAC3Bf,SAAS,CAACgB,QAAQ,CAACP,KAAK,CAAC;IAC3B;EACF;;EAEA;AACF;AACA;AACA;EACE,IAAIQ,KAAKA,CAAA,EAAG;IACV;IACA,OAAO,IAAI,CAACN,KAAK,CAACO,WAAW;EAC/B;EACA,IAAID,KAAKA,CAACA,KAAK,EAAE;IACf,IAAI,CAACN,KAAK,CAACO,WAAW,GAAGD,KAAK;EAChC;AACF;AACAtB,KAAK,CAACC,8BAA8B,GAAGA,8BAA8B;AAErE,SAASA,8BAA8B,IAAIuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}