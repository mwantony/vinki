{"ast":null,"code":"import IMask from '../core/holder.js';\n\n/**\n  Generic element API to use with mask\n  @interface\n*/\nclass MaskElement {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** Safely returns selection start */\n  get selectionStart() {\n    let start;\n    try {\n      start = this._unsafeSelectionStart;\n    } catch (e) {}\n    return start != null ? start : this.value.length;\n  }\n\n  /** Safely returns selection end */\n  get selectionEnd() {\n    let end;\n    try {\n      end = this._unsafeSelectionEnd;\n    } catch (e) {}\n    return end != null ? end : this.value.length;\n  }\n\n  /** Safely sets element selection */\n  select(start, end) {\n    if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n    try {\n      this._unsafeSelect(start, end);\n    } catch (e) {}\n  }\n\n  /** Should be overriden in subclasses */\n  _unsafeSelect(start, end) {}\n  /** Should be overriden in subclasses */\n  get isActive() {\n    return false;\n  }\n  /** Should be overriden in subclasses */\n  bindEvents(handlers) {}\n  /** Should be overriden in subclasses */\n  unbindEvents() {}\n}\nIMask.MaskElement = MaskElement;\nexport { MaskElement as default };","map":{"version":3,"names":["IMask","MaskElement","selectionStart","start","_unsafeSelectionStart","e","value","length","selectionEnd","end","_unsafeSelectionEnd","select","_unsafeSelect","isActive","bindEvents","handlers","unbindEvents","default"],"sources":["C:/Users/Antony/Documents/GitHub/vinki/client/node_modules/imask/esm/controls/mask-element.js"],"sourcesContent":["import IMask from '../core/holder.js';\n\n/**\n  Generic element API to use with mask\n  @interface\n*/\nclass MaskElement {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** Safely returns selection start */\n  get selectionStart() {\n    let start;\n    try {\n      start = this._unsafeSelectionStart;\n    } catch (e) {}\n    return start != null ? start : this.value.length;\n  }\n\n  /** Safely returns selection end */\n  get selectionEnd() {\n    let end;\n    try {\n      end = this._unsafeSelectionEnd;\n    } catch (e) {}\n    return end != null ? end : this.value.length;\n  }\n\n  /** Safely sets element selection */\n  select(start, end) {\n    if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n    try {\n      this._unsafeSelect(start, end);\n    } catch (e) {}\n  }\n\n  /** Should be overriden in subclasses */\n  _unsafeSelect(start, end) {}\n  /** Should be overriden in subclasses */\n  get isActive() {\n    return false;\n  }\n  /** Should be overriden in subclasses */\n  bindEvents(handlers) {}\n  /** Should be overriden in subclasses */\n  unbindEvents() {}\n}\nIMask.MaskElement = MaskElement;\n\nexport { MaskElement as default };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,mBAAmB;;AAErC;AACA;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EAChB;;EAEA;;EAEA;;EAEA;EACA,IAAIC,cAAcA,CAAA,EAAG;IACnB,IAAIC,KAAK;IACT,IAAI;MACFA,KAAK,GAAG,IAAI,CAACC,qBAAqB;IACpC,CAAC,CAAC,OAAOC,CAAC,EAAE,CAAC;IACb,OAAOF,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,IAAI,CAACG,KAAK,CAACC,MAAM;EAClD;;EAEA;EACA,IAAIC,YAAYA,CAAA,EAAG;IACjB,IAAIC,GAAG;IACP,IAAI;MACFA,GAAG,GAAG,IAAI,CAACC,mBAAmB;IAChC,CAAC,CAAC,OAAOL,CAAC,EAAE,CAAC;IACb,OAAOI,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,IAAI,CAACH,KAAK,CAACC,MAAM;EAC9C;;EAEA;EACAI,MAAMA,CAACR,KAAK,EAAEM,GAAG,EAAE;IACjB,IAAIN,KAAK,IAAI,IAAI,IAAIM,GAAG,IAAI,IAAI,IAAIN,KAAK,KAAK,IAAI,CAACD,cAAc,IAAIO,GAAG,KAAK,IAAI,CAACD,YAAY,EAAE;IAChG,IAAI;MACF,IAAI,CAACI,aAAa,CAACT,KAAK,EAAEM,GAAG,CAAC;IAChC,CAAC,CAAC,OAAOJ,CAAC,EAAE,CAAC;EACf;;EAEA;EACAO,aAAaA,CAACT,KAAK,EAAEM,GAAG,EAAE,CAAC;EAC3B;EACA,IAAII,QAAQA,CAAA,EAAG;IACb,OAAO,KAAK;EACd;EACA;EACAC,UAAUA,CAACC,QAAQ,EAAE,CAAC;EACtB;EACAC,YAAYA,CAAA,EAAG,CAAC;AAClB;AACAhB,KAAK,CAACC,WAAW,GAAGA,WAAW;AAE/B,SAASA,WAAW,IAAIgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}