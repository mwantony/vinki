{"ast":null,"code":"import MaskElement from './mask-element.js';\nimport IMask from '../core/holder.js';\n\n/** Bridge between HTMLElement and {@link Masked} */\nclass HTMLMaskElement extends MaskElement {\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\n    @param {HTMLInputElement|HTMLTextAreaElement} input\n  */\n  constructor(input) {\n    super();\n    this.input = input;\n    this._handlers = {};\n  }\n\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n  get rootElement() {\n    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) === null || _this$input$getRootNo2 === void 0 ? void 0 : _this$input$getRootNo2.call(_this$input)) !== null && _this$input$getRootNo !== void 0 ? _this$input$getRootNo : document;\n  }\n\n  /**\n    Is element in focus\n    @readonly\n  */\n  get isActive() {\n    //$FlowFixMe\n    return this.input === this.rootElement.activeElement;\n  }\n\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n  get _unsafeSelectionStart() {\n    return this.input.selectionStart;\n  }\n\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n  get _unsafeSelectionEnd() {\n    return this.input.selectionEnd;\n  }\n\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n  _unsafeSelect(start, end) {\n    this.input.setSelectionRange(start, end);\n  }\n\n  /**\n    HTMLElement value\n    @override\n  */\n  get value() {\n    return this.input.value;\n  }\n  set value(value) {\n    this.input.value = value;\n  }\n\n  /**\n    Binds HTMLElement events to mask internal events\n    @override\n  */\n  bindEvents(handlers) {\n    Object.keys(handlers).forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n  }\n\n  /**\n    Unbinds HTMLElement events to mask internal events\n    @override\n  */\n  unbindEvents() {\n    Object.keys(this._handlers).forEach(event => this._toggleEventHandler(event));\n  }\n\n  /** */\n  _toggleEventHandler(event, handler) {\n    if (this._handlers[event]) {\n      this.input.removeEventListener(event, this._handlers[event]);\n      delete this._handlers[event];\n    }\n    if (handler) {\n      this.input.addEventListener(event, handler);\n      this._handlers[event] = handler;\n    }\n  }\n}\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\nIMask.HTMLMaskElement = HTMLMaskElement;\nexport { HTMLMaskElement as default };","map":{"version":3,"names":["MaskElement","IMask","HTMLMaskElement","constructor","input","_handlers","rootElement","_this$input$getRootNo","_this$input$getRootNo2","_this$input","getRootNode","call","document","isActive","activeElement","_unsafeSelectionStart","selectionStart","_unsafeSelectionEnd","selectionEnd","_unsafeSelect","start","end","setSelectionRange","value","bindEvents","handlers","Object","keys","forEach","event","_toggleEventHandler","EVENTS_MAP","unbindEvents","handler","removeEventListener","addEventListener","selectionChange","drop","click","focus","commit","default"],"sources":["C:/Users/Antony/Documents/GitHub/vinki/client/node_modules/imask/esm/controls/html-mask-element.js"],"sourcesContent":["import MaskElement from './mask-element.js';\nimport IMask from '../core/holder.js';\n\n/** Bridge between HTMLElement and {@link Masked} */\nclass HTMLMaskElement extends MaskElement {\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\n    @param {HTMLInputElement|HTMLTextAreaElement} input\n  */\n  constructor(input) {\n    super();\n    this.input = input;\n    this._handlers = {};\n  }\n\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n  get rootElement() {\n    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) === null || _this$input$getRootNo2 === void 0 ? void 0 : _this$input$getRootNo2.call(_this$input)) !== null && _this$input$getRootNo !== void 0 ? _this$input$getRootNo : document;\n  }\n\n  /**\n    Is element in focus\n    @readonly\n  */\n  get isActive() {\n    //$FlowFixMe\n    return this.input === this.rootElement.activeElement;\n  }\n\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n  get _unsafeSelectionStart() {\n    return this.input.selectionStart;\n  }\n\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n  get _unsafeSelectionEnd() {\n    return this.input.selectionEnd;\n  }\n\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n  _unsafeSelect(start, end) {\n    this.input.setSelectionRange(start, end);\n  }\n\n  /**\n    HTMLElement value\n    @override\n  */\n  get value() {\n    return this.input.value;\n  }\n  set value(value) {\n    this.input.value = value;\n  }\n\n  /**\n    Binds HTMLElement events to mask internal events\n    @override\n  */\n  bindEvents(handlers) {\n    Object.keys(handlers).forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n  }\n\n  /**\n    Unbinds HTMLElement events to mask internal events\n    @override\n  */\n  unbindEvents() {\n    Object.keys(this._handlers).forEach(event => this._toggleEventHandler(event));\n  }\n\n  /** */\n  _toggleEventHandler(event, handler) {\n    if (this._handlers[event]) {\n      this.input.removeEventListener(event, this._handlers[event]);\n      delete this._handlers[event];\n    }\n    if (handler) {\n      this.input.addEventListener(event, handler);\n      this._handlers[event] = handler;\n    }\n  }\n}\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\nIMask.HTMLMaskElement = HTMLMaskElement;\n\nexport { HTMLMaskElement as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}