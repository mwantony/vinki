{"version":3,"file":"react-imask.js","sources":["../src/mixin.ts","../src/input.ts","../src/hook.ts"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IMask from 'imask';\n\n\nexport\ntype Falsy = false | 0 | \"\" | null | undefined;\n\n// TODO should be imported from core\nexport\ntype ReactElement = IMask.MaskElement | HTMLTextAreaElement | HTMLInputElement;\n\nexport\ntype ReactElementProps<MaskElement extends ReactElement=ReactElement> = React.HTMLProps<MaskElement>;\n\nexport\ntype ReactMaskProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement,\n> = {\n  onAccept?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;\n  onComplete?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;\n  unmask?: Unmask;\n  value?: Value;\n  inputRef?: React.Ref<MaskElement>;\n  ref?: React.Ref<React.ComponentType<IMaskInputProps<Opts, Unmask, Value, MaskElement>>>;\n}\n\nexport\ntype ReactMixinComponent<\n  MaskElement extends ReactElement=ReactElement,\n  MaskElementProps=ReactElementProps<MaskElement>\n> = React.ComponentType<MaskElementProps & { inputRef: React.Ref<MaskElement>; }>;\n\nconst MASK_PROPS: { [key in keyof (IMask.AllMaskedOptions & ReactMaskProps)]: any } = {\n  // common\n  mask: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.instanceOf(RegExp),\n    PropTypes.oneOf([Date, Number, IMask.Masked]),\n    PropTypes.instanceOf(IMask.Masked),\n  ]),\n  value: PropTypes.any,\n  unmask: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['typed']),\n  ]),\n  prepare: PropTypes.func,\n  validate: PropTypes.func,\n  commit: PropTypes.func,\n  overwrite: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['shift']),\n  ]),\n  eager: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['append', 'remove']),\n  ]),\n  skipInvalid: PropTypes.bool,\n\n  // events\n  onAccept: PropTypes.func,\n  onComplete: PropTypes.func,\n\n  // pattern\n  placeholderChar: PropTypes.string,\n  displayChar: PropTypes.string,\n  lazy: PropTypes.bool,\n  definitions: PropTypes.object,\n  blocks: PropTypes.object,\n\n  // date\n  pattern: PropTypes.string,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  autofix: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['pad']),\n  ]),\n\n  // number\n  radix: PropTypes.string,\n  thousandsSeparator: PropTypes.string,\n  mapToRadix: PropTypes.arrayOf(PropTypes.string),\n  scale: PropTypes.number,\n  signed: PropTypes.bool,\n  normalizeZeros: PropTypes.bool,\n  padFractionalZeros: PropTypes.bool,\n  min: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n  max: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n\n  // dynamic\n  dispatch: PropTypes.func,\n\n  // ref\n  inputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.object }),\n  ]),\n};\n\nconst MASK_PROPS_NAMES = Object.keys(MASK_PROPS).filter(p => p !== 'value');\nconst NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];\nconst MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(pName =>\n  NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName) < 0\n);\n\nexport type IMaskMixinProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement\n> = IMask.DeduceMaskedOptions<Opts> & ReactMaskProps<Opts, Unmask, Value, MaskElement>;\n\nexport type IMaskInputProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement,\n  MaskElementProps=ReactElementProps<MaskElement>,\n> = MaskElementProps & IMaskMixinProps<Opts, Unmask, Value, MaskElement>;\n\n\n// TODO\n// 1. seems like it's wrong to have Opts as only mask options. Other component/input props should also be there. Where is \"unmask\" prop for instance?\n// 2. Unmask should be infered from Opts (see https://github.com/uNmAnNeR/imaskjs/issues/554#issuecomment-1114014010)\nexport default function IMaskMixin<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement,\n  MaskElementProps=ReactElementProps<MaskElement>,\n>(ComposedComponent: ReactMixinComponent<MaskElement, MaskElementProps>) {\n  const MaskedComponent = class extends React.Component<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>> {\n    static displayName: string;\n    static propTypes: typeof MASK_PROPS;\n\n    element: MaskElement;\n    maskRef: IMask.InputMask<Opts>;\n\n    constructor (props: IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>) {\n      super(props);\n      this._inputRef = this._inputRef.bind(this);\n    }\n\n    componentDidMount () {\n      if (!this.props.mask) return;\n\n      this.initMask();\n    }\n\n    componentDidUpdate () {\n      const props = this.props;\n      const maskOptions = this._extractMaskOptionsFromProps(props);\n      if (maskOptions.mask) {\n        if (this.maskRef) {\n          this.maskRef.updateOptions(maskOptions);\n          if ('value' in props) this.maskValue = props.value;\n        } else {\n          this.initMask(maskOptions);\n        }\n      } else {\n        this.destroyMask();\n        if ('value' in props) this.element.value = props.value as unknown as IMask.InputMask<Opts>['value'];\n      }\n    }\n\n    componentWillUnmount () {\n      this.destroyMask();\n    }\n\n    _inputRef (el: MaskElement) {\n      this.element = el;\n      if (this.props.inputRef) {\n        if (Object.prototype.hasOwnProperty.call(this.props.inputRef, 'current'))\n          (this.props.inputRef as React.MutableRefObject<MaskElement>).current = el;\n        else\n          (this.props.inputRef as React.RefCallback<MaskElement>)(el);\n      }\n    }\n\n    initMask (maskOptions: Opts = this._extractMaskOptionsFromProps(this.props)) {\n      this.maskRef = IMask(this.element, maskOptions)\n        .on('accept', this._onAccept.bind(this))\n        .on('complete', this._onComplete.bind(this));\n\n      if ('value' in this.props) this.maskValue = this.props.value;\n    }\n\n    destroyMask () {\n      if (this.maskRef) {\n        this.maskRef.destroy();\n        delete this.maskRef;\n      }\n    }\n\n    _extractMaskOptionsFromProps (props: Readonly<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>>): Opts {\n      const { ...cloneProps } = props;\n\n      // keep only mask options props\n      (Object.keys(cloneProps) as Array<keyof IMaskMixinProps<Opts, Unmask, Value, MaskElement>>)\n        // TODO why need cast to string?\n        .filter(prop => MASK_OPTIONS_PROPS_NAMES.indexOf(prop as string) < 0)\n        .forEach(nonMaskProp => {\n          delete cloneProps[nonMaskProp];\n        });\n\n      // TODO type actually should be IMask.DeduceMasked<Opts>\n      return cloneProps as unknown as Opts;\n    }\n\n    _extractNonMaskProps (props: Readonly<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>>): MaskElementProps {\n      const { ...cloneProps } = props as any;\n\n      (MASK_PROPS_NAMES as Array<keyof IMaskMixinProps<Opts, Unmask, Value, MaskElement>>).forEach(maskProp => {\n        delete cloneProps[maskProp];\n      });\n      if (!('defaultValue' in cloneProps)) cloneProps.defaultValue = props.mask ? '' : cloneProps.value;\n      delete cloneProps.value;\n\n      return cloneProps as MaskElementProps;\n    }\n\n    get maskValue (): Value {\n      if (this.props.unmask === 'typed') return this.maskRef.typedValue as unknown as Value;\n      if (this.props.unmask) return this.maskRef.unmaskedValue as unknown as Value;\n      return this.maskRef.value as unknown as Value;\n    }\n\n    set maskValue (value: Value) {\n      value = (value == null && this.props.unmask !== 'typed' ? '' : value) as Value;\n      if (this.props.unmask === 'typed') this.maskRef.typedValue = value as unknown as IMask.MaskedTypedValue<Opts['mask']>;\n      else if (this.props.unmask) this.maskRef.unmaskedValue = value as unknown as IMask.InputMask<Opts>['unmaskedValue'];\n      else this.maskRef.value = value as unknown as IMask.InputMask<Opts>['value'];\n    }\n\n    _onAccept (e?: InputEvent) {\n      if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);\n    }\n\n    _onComplete (e?: InputEvent) {\n      if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);\n    }\n\n    render () {\n      return React.createElement(ComposedComponent, {\n        ...this._extractNonMaskProps(this.props),\n        inputRef: this._inputRef,\n      });\n    }\n  };\n\n  const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = `IMask(${nestedComponentName})`;\n  MaskedComponent.propTypes = MASK_PROPS;\n\n  return React.forwardRef<\n    React.ComponentType<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>>,\n    IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>\n  >((props, ref) => React.createElement(MaskedComponent, { ...props, ref }));\n}\n","import React from 'react';\nimport IMask from 'imask';\nimport IMaskMixin, { IMaskInputProps, Falsy, ReactElementProps } from './mixin';\n\n\nconst IMaskInputClass = IMaskMixin(({ inputRef, ...props }) =>\n  React.createElement('input', {\n    ...props,\n    ref: inputRef,\n  })\n);\n\nconst IMaskInputFn = <\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n>(\n  props: IMaskInputProps<Opts, Unmask, Value, HTMLInputElement, ReactElementProps<HTMLInputElement>>,\n  ref: React.Ref<React.ComponentType<IMaskInputProps<Opts, Unmask, Value, HTMLInputElement, ReactElementProps<HTMLInputElement>>>>\n) =>\n  // TODO type\n  React.createElement(IMaskInputClass as unknown as React.ComponentType<IMaskInputProps<Opts, Unmask, Value, HTMLInputElement, ReactElementProps<HTMLInputElement>>>, { ...props, ref })\n;\n\nconst IMaskInput = React.forwardRef(IMaskInputFn as <\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n>(\n  props: IMaskInputProps<Opts, Unmask, Value, HTMLInputElement, ReactElementProps<HTMLInputElement>> & { ref?: React.Ref<React.ComponentType<IMaskInputProps<Opts, Unmask, Value, HTMLInputElement, ReactElementProps<HTMLInputElement>>>> }\n) => React.ReactElement<IMaskInputProps<Opts, Unmask, Value, HTMLInputElement, ReactElementProps<HTMLInputElement>>>);\n\n\nexport default IMaskInput;\n","import IMask from 'imask';\nimport { useEffect, useCallback, useState, useRef, Dispatch } from 'react';\nimport type { MutableRefObject } from 'react';\nimport type { ReactMaskProps, ReactElement } from './mixin';\n\n\nexport default\nfunction useIMask<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  MaskElement extends ReactElement=HTMLInputElement,\n>(\n  opts: Opts,\n  { onAccept, onComplete }: Partial<Pick<ReactMaskProps<Opts, true, IMask.InputMask<Opts>['value'], MaskElement>, 'onAccept' | 'onComplete'>> = {}\n): {\n  ref: MutableRefObject<MaskElement>,\n  maskRef: MutableRefObject<IMask.InputMask<Opts>>,\n  value: IMask.InputMask<Opts>['value'],\n  setValue: Dispatch<IMask.InputMask<Opts>['value']>,\n  unmaskedValue: IMask.InputMask<Opts>['unmaskedValue'],\n  setUnmaskedValue: Dispatch<IMask.InputMask<Opts>['unmaskedValue']>,\n  typedValue: IMask.InputMask<Opts>['typedValue'],\n  setTypedValue: Dispatch<IMask.InputMask<Opts>['typedValue']>,\n} {\n  const ref = useRef<MaskElement>(null);\n  const maskRef = useRef<IMask.InputMask<Opts>>(null);\n  const [initialized, setInitialized] = useState<boolean>(false);\n  const [lastAcceptState, setLastAcceptState] = useState<{\n    value?: IMask.InputMask<Opts>['value'],\n    unmaskedValue?: IMask.InputMask<Opts>['unmaskedValue'],\n    typedValue?: IMask.InputMask<Opts>['typedValue'],\n  }>({});\n  const [value, setValue] = useState<IMask.InputMask<Opts>['value']>('');\n  const [unmaskedValue, setUnmaskedValue] = useState<IMask.InputMask<Opts>['unmaskedValue']>('');\n  const [typedValue, setTypedValue] = useState<IMask.InputMask<Opts>['typedValue']>();\n\n  const _destroyMask = useCallback(() => {\n    maskRef.current?.destroy();\n    maskRef.current = null;\n  }, []);\n\n  const _onAccept = useCallback(\n    (event?: InputEvent) => {\n      const m = maskRef.current;\n      if (!m) return;\n\n      setLastAcceptState({\n        value: m.value,\n        unmaskedValue: m.unmaskedValue,\n        typedValue: m.typedValue,\n      });\n      setTypedValue(m.typedValue);\n      setUnmaskedValue(m.unmaskedValue);\n      setValue(m.value);\n      onAccept?.(m.value, m, event);\n    },\n    [onAccept],\n  );\n\n  const _onComplete = useCallback(\n    () => maskRef.current && onComplete?.(maskRef.current.value, maskRef.current),\n    [onComplete],\n  );\n\n  useEffect(() => {\n    const el = ref.current;\n\n    if (!el || !opts?.mask) return _destroyMask();\n\n    const mask = maskRef.current;\n\n    if (!mask) {\n      if (el && opts?.mask) {\n        maskRef.current = IMask(el, opts);\n        _onAccept();\n      }\n    } else {\n      mask?.updateOptions(opts);\n    }\n    setInitialized(Boolean(maskRef.current));\n  }, [opts, _destroyMask, _onAccept]);\n\n  useEffect(() => {\n    if (!maskRef.current) return;\n\n    const mask = maskRef.current;\n\n    mask.on('accept', _onAccept);\n    mask.on('complete', _onComplete);\n\n    return () => {\n      mask.off('accept', _onAccept);\n      mask.off('complete', _onComplete);\n    };\n  }, [_onAccept, _onComplete]);\n\n  useEffect(() => {\n    const { value: lastAcceptValue, ...state } = lastAcceptState;\n    const mask = maskRef.current;\n    if (mask && initialized && lastAcceptValue !== value) mask.value = value;\n    setLastAcceptState(state);\n  }, [value]);\n\n  useEffect(() => {\n    const { unmaskedValue: lastAcceptUnmaskedValue, ...state } = lastAcceptState;\n    const mask = maskRef.current;\n    if (mask && initialized && lastAcceptUnmaskedValue !== unmaskedValue) mask.unmaskedValue = unmaskedValue;\n    setLastAcceptState(state);\n  }, [unmaskedValue]);\n\n  useEffect(() => {\n    const { typedValue: lastAcceptTypedValue, ...state } = lastAcceptState;\n    const mask = maskRef.current;\n    if (mask && initialized && lastAcceptTypedValue !== typedValue) mask.typedValue = typedValue;\n    setLastAcceptState(state);\n  }, [typedValue]);\n\n  useEffect(() => _destroyMask, [_destroyMask]);\n\n  return {\n    ref,\n    maskRef,\n    value, setValue,\n    unmaskedValue, setUnmaskedValue,\n    typedValue, setTypedValue,\n  };\n}\n"],"names":["MASK_PROPS","mask","PropTypes","oneOfType","array","func","string","instanceOf","RegExp","oneOf","Date","Number","IMask","Masked","value","any","unmask","bool","prepare","validate","commit","overwrite","eager","skipInvalid","onAccept","onComplete","placeholderChar","displayChar","lazy","definitions","object","blocks","pattern","format","parse","autofix","radix","thousandsSeparator","mapToRadix","arrayOf","scale","number","signed","normalizeZeros","padFractionalZeros","min","max","dispatch","inputRef","shape","current","MASK_PROPS_NAMES","Object","keys","filter","p","NON_MASK_OPTIONS_PROPS_NAMES","MASK_OPTIONS_PROPS_NAMES","pName","indexOf","IMaskMixin","ComposedComponent","MaskedComponent","React","Component","constructor","props","_inputRef","bind","componentDidMount","initMask","componentDidUpdate","maskOptions","_extractMaskOptionsFromProps","maskRef","updateOptions","maskValue","destroyMask","element","componentWillUnmount","el","prototype","hasOwnProperty","call","arguments","length","undefined","on","_onAccept","_onComplete","destroy","cloneProps","assign","_objectDestructuringEmpty","prop","forEach","nonMaskProp","_extractNonMaskProps","_ref","maskProp","defaultValue","typedValue","unmaskedValue","e","render","createElement","nestedComponentName","displayName","name","concat","propTypes","forwardRef","ref","IMaskInputClass","_objectWithoutPropertiesLoose","_excluded","IMaskInputFn","IMaskInput","useIMask","opts","useRef","initialized","setInitialized","useState","lastAcceptState","setLastAcceptState","setValue","setUnmaskedValue","setTypedValue","_destroyMask","useCallback","_maskRef$current","event","m","useEffect","Boolean","off","lastAcceptValue","state","lastAcceptUnmaskedValue","_excluded2","lastAcceptTypedValue","_excluded3"],"mappings":"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"}